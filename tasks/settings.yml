# Copyright 2018-2025 Chris Croome
#
# This file is part of the Webarchitects Matomo Ansible role.
#
# The Webarchitects Matomo Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects Matomo Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects Matomo Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: Apply Matomo settings
  block:

    - name: Matomo config
      block:

        - name: Debug matomo_config
          ansible.builtin.debug:
            var: matomo_config
            verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}0{% else %}1{% endif %}"

        - name: Debug matomo_config | ansible.builtin.dict2items
          ansible.builtin.debug:
            var: matomo_config | ansible.builtin.dict2items
            verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}0{% else %}1{% endif %}"

        - name: Include Matomo config section tasks
          ansible.builtin.include_tasks: config_section.yml
          loop: "{{ matomo_config | ansible.builtin.dict2items }}"
          loop_control:
            loop_var: matomo_config_section
            label: "{{ matomo_config_section.key }}"
          when: matomo_config | ansible.builtin.dict2items | length > 0

        # - name: Fail
        #   fail:

      when: matomo_config is defined

    # TODO Use a dictionary to define general config settings, for example:
    # matomo_config_general:
    #   force_ssl: 1
    #   login_allow_logme: 1

    - name: "Check the Matomo force_ssl setting for {{ matomo_user }}"
      ansible.builtin.command: "{{ matomo_php }} console --no-ansi -n config:get --section='General' --key='force_ssl' --format='text'"
      args:
        chdir: "{{ matomo_html }}"
      changed_when: false
      check_mode: false
      register: matomo_get_force_ssl
      failed_when: matomo_get_force_ssl.rc is not regex('^0|1$')
      become: true
      become_user: "{{ matomo_user }}"

    - name: "Set force_ssl to true for {{ matomo_user }}"
      ansible.builtin.command: "{{ matomo_php }} console --no-ansi -n config:set --section='General' --key='force_ssl' --value='1'"
      args:
        chdir: "{{ matomo_html }}"
      become: true
      become_user: "{{ matomo_user }}"
      when: ( matomo_get_force_ssl.rc == 1 ) or ( matomo_get_force_ssl.stdout != "General.force_ssl = 1" )
      changed_when: true

    - name: "Check the Matomo login_allow_logme setting for {{ matomo_user }}"
      ansible.builtin.command: "{{ matomo_php }} console --no-ansi -n config:get --section='General' --key='login_allow_logme' --format='text'"
      args:
        chdir: "{{ matomo_html }}"
      changed_when: false
      check_mode: false
      register: matomo_get_login_allow_logme
      failed_when: matomo_get_login_allow_logme.rc is not regex('^0|1$')
      become: true
      become_user: "{{ matomo_user }}"

    - name: "Set login_allow_logme to true for {{ matomo_user }}"
      ansible.builtin.command: "{{ matomo_php }} console --no-ansi -n config:set --section='General' --key='login_allow_logme' --value='1'"
      args:
        chdir: "{{ matomo_html }}"
      become: true
      become_user: "{{ matomo_user }}"
      when: ( matomo_get_login_allow_logme.rc == 1 ) or ( matomo_get_login_allow_logme.stdout != "General.login_allow_logme = 1" )
      changed_when: true

    - name: "Check the Matomo salt setting for {{ matomo_user }}"
      ansible.builtin.command: "{{ matomo_php }} console --no-ansi -n config:get --section='General' --key='salt' --format='text'"
      args:
        chdir: "{{ matomo_html }}"
      changed_when: false
      check_mode: false
      register: matomo_get_salt
      failed_when: matomo_get_salt.rc is not regex('^0|1$')
      become: true
      become_user: "{{ matomo_user }}"

    - name: Generate and set a random string for the salt
      block:

        # TODO
        # https://docs.ansible.com/ansible/latest/collections/community/general/random_string_lookup.html

        - name: "Random string generated for Matomo salt for {{ matomo_user }}"
          ansible.builtin.command: pwgen -n 33 1
          changed_when: false
          check_mode: false
          register: matomo_salt_pwgen
          # no_log: true

        - name: "Set variable for Matomo salt for {{ matomo_user }}"
          ansible.builtin.set_fact:
            matomo_salt: "{{ matomo_salt_pwgen.stdout | trim }}"
          # no_log: true

        - name: "Set salt for {{ matomo_user }}"
          ansible.builtin.command: "{{ matomo_php }} console --no-ansi -n config:set --section='General' --key='salt' --value='{{ matomo_salt }}'"
          args:
            chdir: "{{ matomo_html }}"
          changed_when: true
          become: true
          become_user: "{{ matomo_user }}"
          # no_log: true

      when: ( matomo_get_salt.rc == 1 ) or ( matomo_get_salt.stdout == "Nothing found" )

    - name: "Check the Matomo database schema for {{ matomo_user }}"
      ansible.builtin.command: "{{ matomo_php }} console --no-ansi -n config:get --section='database' --key='schema'"
      args:
        chdir: "{{ matomo_html }}"
      become: true
      become_user: "{{ matomo_user }}"
      check_mode: false
      changed_when: false
      register: matomo_config_get_database_schema

    - name: "Debug matomo_config_get_database_schema for {{ matomo_user }}"
      ansible.builtin.debug:
        var: matomo_config_get_database_schema
        verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}1{% else %}2{% endif %}"

    - name: "Set a fact for the existing Matomo database schema for {{ matomo_user }}"
      ansible.builtin.set_fact:
        matomo_database_schema: "{{ matomo_config_get_database_schema.stdout | community.dns.unquote_txt | trim }}"

    - name: Debug matomo_database_schema
      ansible.builtin.debug:
        var: matomo_database_schema
        verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}0{% else %}1{% endif %}"

    - name: "Update the Matomo database schema for {{ matomo_user }}"
      ansible.builtin.command: "{{ matomo_php }} console --no-ansi -n config:set '{{ matomo_set_database_schema }}'"
      args:
        chdir: "{{ matomo_html }}"
      vars:
        matomo_set_database_schema: 'database.schema="{{ matomo_db_schema }}"'
      become: true
      become_user: "{{ matomo_user }}"
      changed_when: true
      when: matomo_database_schema != matomo_db_schema

    - name: "Check the Matomo database charset for {{ matomo_user }}"
      ansible.builtin.command: "{{ matomo_php }} console --no-ansi -n config:get --section='database' --key='charset'"
      args:
        chdir: "{{ matomo_html }}"
      become: true
      become_user: "{{ matomo_user }}"
      check_mode: false
      changed_when: false
      register: matomo_config_get_database_charset

    - name: "Debug matomo_config_get_database_charset for {{ matomo_user }}"
      ansible.builtin.debug:
        var: matomo_config_get_database_charset
        verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}1{% else %}2{% endif %}"

    - name: "Set a fact for the existing Matomo database charset for {{ matomo_user }}"
      ansible.builtin.set_fact:
        matomo_database_charset: "{{ matomo_config_get_database_charset.stdout | community.dns.unquote_txt | trim }}"

    - name: Debug matomo_database_charset
      ansible.builtin.debug:
        var: matomo_database_charset
        verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}0{% else %}1{% endif %}"

    - name: "Update the Matomo database charset for {{ matomo_user }}"
      ansible.builtin.command: "{{ matomo_php }} console --no-ansi -n config:set '{{ matomo_set_database_charset }}'"
      args:
        chdir: "{{ matomo_html }}"
      vars:
        matomo_set_database_charset: 'database.charset="{{ matomo_db_charset }}"'
      become: true
      become_user: "{{ matomo_user }}"
      changed_when: true
      when: matomo_database_charset != matomo_db_charset

    - name: "Check the Matomo database collation for {{ matomo_user }}"
      ansible.builtin.command: "{{ matomo_php }} console --no-ansi -n config:get --section='database' --key='collation'"
      args:
        chdir: "{{ matomo_html }}"
      become: true
      become_user: "{{ matomo_user }}"
      check_mode: false
      changed_when: false
      register: matomo_config_get_database_collation

    - name: "Debug matomo_config_get_database_collation for {{ matomo_user }}"
      ansible.builtin.debug:
        var: matomo_config_get_database_collation
        verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}1{% else %}2{% endif %}"

    - name: "Set a fact for the existing Matomo database collation for {{ matomo_user }}"
      ansible.builtin.set_fact:
        matomo_database_collation: "{{ matomo_config_get_database_collation.stdout | community.dns.unquote_txt | trim }}"

    - name: Debug matomo_database_collation
      ansible.builtin.debug:
        var: matomo_database_collation
        verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}0{% else %}1{% endif %}"

    - name: "Update the Matomo database collation for {{ matomo_user }}"
      ansible.builtin.command: "{{ matomo_php }} console --no-ansi -n config:set '{{ matomo_set_database_collation }}'"
      args:
        chdir: "{{ matomo_html }}"
      vars:
        matomo_set_database_collation: 'database.collation="{{ matomo_db_collation }}"'
      become: true
      become_user: "{{ matomo_user }}"
      changed_when: true
      when: matomo_database_collation != matomo_db_collation

    - name: "Run php console core:create-security-files for {{ matomo_user }}"
      ansible.builtin.command: "{{ matomo_php }} console --no-ansi -n core:create-security-files"
      args:
        chdir: "{{ matomo_html }}"
      become: true
      become_user: "{{ matomo_user }}"
      changed_when: true
      register: matomo_core_create_security_files
      failed_when: ( "Done" not in matomo_core_create_security_files.stdout )

    - name: Run diagnostics
      block:

        - name: "Run php console diagnostics:run for {{ matomo_user }}"
          ansible.builtin.command: "{{ matomo_php }} console --no-ansi -n diagnostics:run"
          args:
            chdir: "{{ matomo_html }}"
          changed_when: false
          check_mode: false
          become: true
          become_user: "{{ matomo_user }}"
          register: matomo_diagnostics_run
          failed_when: ( "There are no problems with your Matomo setup" not in matomo_diagnostics_run.stdout )

      rescue:

        - name: Print issues found
          ansible.builtin.debug:
            var: matomo_diagnostics_run.stdout_lines

        - name: Fail if problems found, unless the site is not yet installed
          ansible.builtin.fail:
          when:
            - matomo_diagnostics_fail | bool
            - ( matomo_config_check is defined ) and ( not matomo_config_check.stat.exists | bool )

  tags:
    - matomo
    - matomo_config
    - matomo_settings
...
