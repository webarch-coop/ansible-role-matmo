# Copyright 2018-2025 Chris Croome
#
# This file is part of the Webarchitects Matomo Ansible role.
#
# The Webarchitects Matomo Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects Matomo Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects Matomo Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: Matomo user present
  block:

    - name: Check variables
      ansible.builtin.assert:
        that:
          - ( matomo_login is defined ) and ( matomo_login is regex("^[a-zA-Z0-9-]{2,14}$") )
          - ( matomo_login_email is defined ) and ( matomo_login_email is regex("^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$") )
          - ( matomo_password is defined )
          - ( matomo_token_auth is defined )
          - ( matomo_url is defined )
        msg: "Please ensure that all the required variables are defined"
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

    - name: "Get a list of the Matomo superusers for {{ matomo_url }}"
      ansible.builtin.uri:
        url: "{{ matomo_url }}"
        method: POST
        body_format: form-urlencoded
        body:
          module: API
          format: JSON
          token_auth: "{{ matomo_token_auth }}"
          method: UsersManager.getUsersHavingSuperUserAccess
        status_code: 200
        return_content: true
        use_netrc: false
      become: true
      become_user: "{{ matomo_user }}"
      check_mode: false
      delegate_to: "{{ inventory_hostname }}"
      changed_when: false
      register: matomo_api_get_users_having_super_user_access
      failed_when: ( matomo_api_get_users_having_super_user_access.json is not defined )

    - name: Debug matomo_api_get_users_having_super_user_access
      ansible.builtin.debug:
        var: matomo_api_get_users_having_super_user_access
        verbosity: 2

    - name: Check that we are not configuring a super user
      ansible.builtin.assert:
        that:
          - matomo_login not in ( matomo_api_get_users_having_super_user_access.json | community.general.json_query('[].login') )
          - matomo_login_email not in ( matomo_api_get_users_having_super_user_access.json | community.general.json_query('[].email') )
        fail_msg: >-
          Please use a different email address (or alias) and login username for the Matomo superuser and regular users.
          The username and email that triggered this failure is {{ matomo_login }} <{{ matomo_login_email }}>.
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

    - name: Set the matomo_login_existing to an empty value
      ansible.builtin.set_fact:
        matomo_login_existing: ""

    - name: "Check if a Matomo login with the email address {{ matomo_login_email }} exists using the API"
      ansible.builtin.uri:
        url: "{{ matomo_url }}"
        method: POST
        body_format: form-urlencoded
        body:
          module: API
          format: JSON
          token_auth: "{{ matomo_token_auth }}"
          method: UsersManager.getUserLoginFromUserEmail
          userEmail: "{{ matomo_login_email }}"
        status_code: 200
        return_content: true
        use_netrc: false
      become: true
      become_user: "{{ matomo_user }}"
      check_mode: false
      delegate_to: "{{ inventory_hostname }}"
      changed_when: false
      register: matomo_api_get_user_login_from_user_email
      failed_when: ( matomo_api_get_user_login_from_user_email.json is not defined )

    - name: Debug matomo_api_get_user_login_from_user_email
      ansible.builtin.debug:
        var: matomo_api_get_user_login_from_user_email
        verbosity: 2

    - name: "Include check for the {{ matomo_login }} existing when the {{ matomo_login_email }} doesn't exist"
      ansible.builtin.include_tasks: check_login.yml
      when: ( matomo_api_get_user_login_from_user_email.json.value is not defined )

    - name: Set matomo_login_existing and include password checks when the user exists
      block:

        - name: "Set the matomo_login_existing variable to {{ matomo_api_get_user_login_from_user_email.json.value }} as a Matomo account with a matching email address exists"
          ansible.builtin.set_fact:
            matomo_login_existing: "{{ matomo_api_get_user_login_from_user_email.json.value }}"

        - name: "Include the check password tasks when a user with the email address {{ matomo_login_email }} does exist"
          ansible.builtin.include_tasks: check_password.yml

      when: ( matomo_api_get_user_login_from_user_email.json.value is defined )

    - name: Set the matomo_login_existing variable to matomo_login when it is not defined
      ansible.builtin.set_fact:
        matomo_login_existing: "{{ matomo_login }}"
      when: ( matomo_login_existing is not defined ) or ( matomo_login_existing | length == 0 )

  tags:
    - matomo
...
