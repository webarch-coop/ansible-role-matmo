---
- name: "Get the existing email address for the Matomo {{ matomo_login }} user"
  shell: "IFS=$'\n' ; for u in $(php console user:list --no-ansi -n); do echo $u | grep ' {{ matomo_login }} ' | sed 's/^Username: //' | awk '{ print $2 }' | sed 's/^(//' | sed 's/)$//' ; done"
  # shell: "IFS=$'\n' ; for u in $(php console user:list --no-ansi -n); do echo $u | awk '{ print $3 }' | sed 's/(//' | sed 's/)//' ; done | grep -q ^{{ matomo_login_email | quote }}$ && echo true || echo false"
  args:
    executable: /bin/bash
    chdir: "{{ matomo_html }}"
  register: matomo_login_email_check
  changed_when: false
  check_mode: false
  become: true
  become_user: "{{ matomo_user }}"
  tags:
    - matomo
    - users-update

# - name: Set a variable based on the email address check
#   set_fact:
#     matomo_login_email_update: "{{ matomo_login_email_check.stdout }}"
#   when: matomo_login_email_check is defined
#   tags:
#     - matomo
#     - users-update

- name: Update the email address
  block:

    - name: Get the Matomo database prefix
      include_tasks: table_prefix.yml
      tags:
        - matomo
        - users-update

    - name: "Update the email address for {{ matomo_login }}"
      command: 'mysql {{ matomo_db_name }} --skip-column-names --batch -e "UPDATE {{ matomo_table_prefix }}user SET email=\"{{ matomo_login_email | quote }}\" WHERE login=\"{{ matomo_login | quote }}\""'
      args:
        chdir: "{{ matomo_html }}"
      become: true
      become_user: "{{ matomo_user }}"
      tags:
        - matomo
        - users-update

  when: matomo_login_email != matomo_login_email_check.stdout
  # when: ( matomo_login_email_update is defined ) and ( matomo_login_email_update == True )

- name: "Check for existance of {{ matomo_home }}/.notify_matomo_passwd file"
  stat:
    path: "{{ matomo_home }}/.notify_matomo_passwd"
  register: matomo_passwd_notify_check
  tags:
    - matomo
    - users-update

- name: Password notification
  block:

    - name: Generate a random string for Matomo password
      command: pwgen -n 20 1
      register: matomo_login_password_gen
      no_log: true
      tags:
        - matomo
        - users-update

    - name: Set a variable with the random password
      set_fact:
        matomo_login_password: "{{ matomo_login_password_gen.stdout }}"
      no_log: true
      tags:
        - matomo
        - users-update

    - name: "Reset the Matomo password for {{ matomo_login }}"
      shell: "php console user:reset-password --no-ansi -n --login='{{ matomo_login }}' --new-password='{{ matomo_login_password }}'"
      args:
        executable: /bin/bash
        chdir: "{{ matomo_html }}"
      become: true
      become_user: "{{ matomo_user }}"
      no_log: true
      tags:
        - matomo
        - users-update

    - name: "Password notification email sent to {{ matomo_login_email }}"
      mail:
        from: "{{ matomo_email_from | default('Webarchitects') }} <root@{{ ansible_fqdn }}>"
        to: "{{ matomo_login_email }}"
        subject: "[{{ matomo_email_subject_tag | default('webarchitects') }}] Matomo {{ matomo_login }} account details for {{ matomo_url }}"
        body: "{{ lookup('template', 'templates/notify_matomo_passwd.j2') }}"
        host: localhost
        port: 25
        secure: never
      tags:
        - matomo
        - users-update

    - name: "Notification date recorded in {{ matomo_home }}/.notify_matomo_passwd file"
      lineinfile:
        path: "{{ matomo_home }}/.notify_matomo_passwd"
        line: "{{ lookup('pipe', 'date +%Y-%m-%d-%H-%M-%S')}} : {{ matomo_login }} <{{ matomo_login_email }}>"
        create: true
        state: present
        insertafter: EOF
        owner: root
        group: root
        mode: 0640
      tags:
        - matomo

  when: ( matomo_passwd_notify_check.stat.exists == False ) and ( matomo_notify_passwd is defined and matomo_notify_passwd == True ) or ( matomo_notify_passwd is not defined ) 
