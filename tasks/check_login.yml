# Copyright 2018-2024 Chris Croome
#
# This file is part of the Webarchitects Matomo Ansible role.
#
# The Webarchitects Matomo Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects Matomo Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects Matomo Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: Check if a Matomo login exists when there is no match for the matomo_login_email address
  block:

    - name: Check variables
      ansible.builtin.assert:
        that:
          - ( matomo_url is defined )
          - ( matomo_token_auth is defined )
          - ( matomo_login is defined ) and ( matomo_login is regex("^[a-zA-Z0-9-]{2,14}$") )
          - ( matomo_login_email is defined ) and ( matomo_login_email is regex("^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$") )
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

    - name: Unblock all blocked IPs since there is no CLI to all IPs to the whitelist or check which are blocked
      ansible.builtin.command: "{{ matomo_php }} console --no-ansi -n login:unblock-blocked-ips"
      args:
        chdir: "{{ matomo_html }}"
      register: matomo_unblock_blocked_ips
      failed_when: matomo_unblock_blocked_ips.stdout != "Done"
      changed_when: false
      check_mode: false
      become: true
      become_user: "{{ matomo_user }}"

    - name: "Check if a Matomo login named {{ matomo_login }} exists using the API"
      ansible.builtin.uri:
        url: "{{ matomo_url }}"
        method: POST
        body_format: form-urlencoded
        body:
          module: API
          format: JSON
          token_auth: "{{ matomo_token_auth }}"
          method: UsersManager.userExists
          userLogin: "{{ matomo_login }}"
        status_code: 200
        return_content: true
        use_netrc: false
      become: true
      become_user: "{{ matomo_user }}"
      check_mode: false
      delegate_to: "{{ inventory_hostname }}"
      changed_when: false
      register: matomo_api_user_exists
      failed_when: ( matomo_api_user_exists.json is not defined )

    - name: Debug matomo_api_user_exists
      ansible.builtin.debug:
        var: matomo_api_user_exists
        verbosity: 2

    - name: Tasks when the matomo_login account exists
      block:

        - name: Update the email address
          ansible.builtin.include_tasks: update_email.yml

        - name: "Set the matomo_login_existing variables to {{ matomo_login }}"
          ansible.builtin.set_fact:
            matomo_login_existing: "{{ matomo_login }}"

      when:
        - ( matomo_api_user_exists.json is defined )
        - ( matomo_api_user_exists.json.value is defined )
        - ( matomo_api_user_exists.json.value )

    - name: Add a new user account when there is no match for the matomo_login or matomo_login_email address
      ansible.builtin.include_tasks: add_user.yml
      when:
        - ( matomo_api_user_exists.json is defined )
        - ( matomo_api_user_exists.json.value is defined )
        - ( not matomo_api_user_exists.json.value )

  tags:
    - matomo
...
