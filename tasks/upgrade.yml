# Copyright 2018-2024 Chris Croome
#
# This file is part of the Webarchitects Matomo Ansible role.
#
# The Webarchitects Matomo Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects Matomo Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects Matomo Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: Upgrade Matomo
  block:

    - name: Check that the variables for the installed and required versions of Matomo are defined
      ansible.builtin.assert:
        that:
          - matomo_installed is defined
          - matomo_installed_semver is defined
          - matomo_required is defined
          - matomo_required_semver is defined
          - matomo_installed is ansible.builtin.version('3.0.0', 'ge', version_type='semver')
          - matomo_required is ansible.builtin.version('3.0.0', 'ge', version_type='semver')
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

    - name: Matomo download tgz tasks included
      ansible.builtin.include_tasks: download.yml

    - name: Set a fact for the config file and site backup paths
      ansible.builtin.set_fact:
        matomo_config_file_backup: "{{ matomo_private }}/config.ini.php.{{ ansible_date_time.date }}.{{ ansible_date_time.time }}.bak"
        matomo_site_backup: "{{ matomo_private }}/matomo_site.{{ ansible_date_time.date }}.{{ ansible_date_time.time }}"

    - name: "Backup up the Matomo config file to {{ matomo_config_file_backup }}"
      ansible.builtin.copy:
        remote_src: true
        src: "{{ matomo_html }}/config/config.ini.php"
        dest: "{{ matomo_config_file_backup }}"
        owner: "{{ matomo_user }}"
        group: "{{ matomo_group }}"
        mode: "0600"

    - name: Replace Matomo when upgrading major versions
      block:

        - name: "Move the Matomo site to the backup path {{ matomo_site_backup }}"
          ansible.builtin.command: "mv {{ matomo_html }} {{ matomo_site_backup }}"
          args:
            creates: "{{ matomo_site_backup }}"
          become: true
          become_user: "{{ matomo_user }}"

        - name: "Required Matomo moved into place at {{ matomo_html }}"
          ansible.builtin.command: "mv {{ matomo_private }}/matomo {{ matomo_html }}"
          args:
            creates: "{{ matomo_html }}"
          become: true
          become_user: "{{ matomo_user }}"

        - name: Matomo config file backup copied into place
          ansible.builtin.command: "cp -a {{ matomo_config_file_backup }} {{ matomo_html }}/config/config.ini.php"
          args:
            creates: "{{ matomo_html }}/config/config.ini.php"
          become: true
          become_user: "{{ matomo_user }}"

      when: matomo_required_semver.major is ansible.builtin.version(matomo_installed_semver.major, 'gt')

    - name: Rsync Matomo when not upgrading major versions
      block:

        - name: Required Matomo rsynced over last version  # noqa: command-instead-of-module
          ansible.builtin.command: "rsync -aq {{ matomo_private }}/matomo/ {{ matomo_html }}/"
          register: matomo_rsync_command
          changed_when: ( "total size is 0" not in matomo_rsync_command.stdout_lines )
          become: true
          become_user: "{{ matomo_user }}"

      when: matomo_required_semver.major is ansible.builtin.version(matomo_installed_semver.major, 'eq')

    - name: Matomo database upgraded
      ansible.builtin.command: "{{ matomo_php }} console --no-ansi -n core:update --yes"
      args:
        chdir: "{{ matomo_html }}"
      register: matomo_core_update
      changed_when: ( "Everything is already up to date." not in matomo_core_update.stdout_lines )
      failed_when: ( "Matomo has been successfully updated!" not in matomo_core_update.stdout_lines ) and ( "Everything is already up to date." not in matomo_core_update.stdout_lines )
      become: true
      become_user: "{{ matomo_user }}"

    - name: Migrate token auths after upgrade from Matomo 3.x
      ansible.builtin.command: "{{ matomo_php }} console --no-ansi -n core:matomo4-migrate-token-auths"
      args:
        chdir: "{{ matomo_html }}"
      become: true
      become_user: "{{ matomo_user }}"
      when: matomo_installed is version('3.14.1', '<=')
      changed_when: true

    - name: Convert database to utf8mb4 after upgrade from Matomo 3.x
      ansible.builtin.command: "{{ matomo_php }} console --no-ansi -n core:convert-to-utf8mb4"
      args:
        chdir: "{{ matomo_html }}"
      become: true
      become_user: "{{ matomo_user }}"
      when: matomo_installed is version('3.14.1', '<=')
      changed_when: true

    - name: Create some web server security files if they haven't existed previously
      ansible.builtin.command: "{{ matomo_php }} console --no-ansi -n core:create-security-files"
      args:
        chdir: "{{ matomo_html }}"
      become: true
      become_user: "{{ matomo_user }}"
      changed_when: true

    - name: Delete sub-directories in the tmp dir
      ansible.builtin.file:
        path: "{{ matomo_html }}/tmp/{{ dir }}"
        state: absent
      loop:
        - assets
        - cache
        - climulti
        - latest
        - logs
        - sessions
        - tcpdf
        - templates_c
      loop_control:
        loop_var: dir

    - name: Get the installed Matomo version number
      ansible.builtin.command: "{{ matomo_php }} console --no-ansi -n core:update --version"
      args:
        chdir: "{{ matomo_html }}"
      become: true
      become_user: "{{ matomo_user }}"
      changed_when: false
      check_mode: false
      register: matomo_installed_check

    - name: Set variables for the installed Matomo version number
      ansible.builtin.set_fact:
        matomo_installed: "{{ matomo_installed_check.stdout.split(' ')[-1] }}"
        matomo_installed_semver: "{{ matomo_installed_check.stdout.split(' ')[-1] | string | community.general.jc('semver') }}"

    - name: Print the installed version of Matomo
      ansible.builtin.debug:
        msg: "The installed version of Matomo is {{ matomo_installed }}"
        verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}0{% else %}1{% endif %}"

    - name: Debug matomo_installed_semver
      ansible.builtin.debug:
        var: matomo_installed_semver
        verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}1{% else %}2{% endif %}"

    - name: Check for unexpected files to be deleted
      ansible.builtin.command: "{{ matomo_php }} console diagnostics:unexpected-files"
      args:
        chdir: "{{ matomo_html }}"
      become: true
      become_user: "{{ matomo_user }}"
      changed_when: false
      check_mode: false
      register: matomo_unexpected_files

    - name: Debug the list of files to be deleted
      ansible.builtin.debug:
        var: matomo_unexpected_files.stdout_lines
        verbosity: 1
      when: matomo_unexpected_files.stdout | length > 0

    - name: Delete unexpected files
      ansible.builtin.command: "{{ matomo_php }} console diagnostics:unexpected-files --delete -n"
      args:
        chdir: "{{ matomo_html }}"
      become: true
      become_user: "{{ matomo_user }}"
      changed_when: true
      when:
        - matomo_unexpected_files.rc == 0
        - matomo_unexpected_files.stdout | length > 0

  tags:
    - matomo
...
