---
- name: Fail if the Matomo user login is not provided
  fail:
    msg: "A value for matomo_login needs to be provided"
  when: ( matomo_login is not defined ) or ( matomo_login == "" )
  tags:
    - matomo
    - users-update

- name: Fail if the Matomo user email address is not provided
  fail:
    msg: "A value for matomo_login_email needs to be provided"
  when: ( matomo_login_email is not defined ) or ( matomo_login_email == "" )
  tags:
    - matomo
    - users-update

- name: "Check if the Matomo {{ matomo_user }} exists"
  command: "id {{ matomo_user }}"
  ignore_errors: true
  check_mode: false
  register: matomo_user_check
  changed_when: '"no such user" in matomo_user_check.stderr'
  tags:
    - matomo
    - users-update

- name: "Check if {{ matomo_html }}/config/config.ini.php exists"
  stat:
    path: "{{ matomo_html }}/config/config.ini.php"
  check_mode: false
  register: matomo_config
  tags:
    - matomo
    - users-update

- name: "Add Matomo users if {{ matomo_user }} exists"
  block:

    - name: Get the existing usernames
      shell: "for u in $(php console user:list --no-ansi -n); do echo $u | awk '{ print $2 }' ; done"
      args:
        executable: /bin/bash
        chdir: "{{ matomo_html }}"
      environment:
        IFS: '\n'
      register: matomo_logins
      changed_when: false
      check_mode: false
      become: true
      become_user: "{{ matomo_user }}"
      tags:
        - matomo
        - users-update

    - name: Set a variable based on the existance of the user
      set_fact:
        matomo_login_absent: true
      when: '"matomo_login" not in matomo_logins.stdout_lines'
      tags:
        - matomo
        - users-update

    - name: Get the existing email addresses
      shell: "for u in $(php console user:list --no-ansi -n); do echo $u | awk '{ print $3 }' | sed 's/(//' | sed 's/)//' ; done"
      args:
        executable: /bin/bash
        chdir: "{{ matomo_html }}"
      environment:
        IFS: '\n'
      register: matomo_login_emails
      changed_when: false
      check_mode: false
      become: true
      become_user: "{{ matomo_user }}"
      tags:
        - matomo
        - users-update

    - name: Set a variable based on the existance of the user email address
      set_fact:
        matomo_login_email_absent: true
      when: '"matomo_login_emails" not in matomo_login_emails.stdout_lines'
      tags:
        - matomo
        - users-update

    - name: Add Matomo user
      block:

        - name: Generate a random password for the Matomo user
          block:

            - name: Generate a random string for Matomo password
              command: pwgen -n 20 1
              register: matomo_login_password_gen
              no_log: true
              tags:
                - matomo
                - users-update

            - name: Set a variable with the random password
              set_fact:
                matomo_login_password: "{{ matomo_login_password_gen.stdout }}"
              no_log: true
              tags:
                - matomo
                - users-update

          when: ( matomo_login_password is not defined ) or ( matomo_login_password == "" )

        - name: Add user account
          shell: "php console user:create --no-ansi -n --login='{{ matomo_login }}' --email='{{ matomo_login_email }}' --password='{{ matomo_login_password }}'"
          args:
            executable: /bin/bash
            chdir: "{{ matomo_html }}"
          become: true
          become_user: "{{ matomo_user }}"
          no_log: true
          tags:
            - matomo
            - users-update

        - name: "Password notification email sent to {{ matomo_login_email }}"
          mail:
            from: "{{ matomo_email_from | default('Webarchitects') }} <root@{{ ansible_fqdn }}>"
            to: "{{ matomo_admin_email }}"
            subject: "[{{ matomo_email_subject_tag | default('webarchitects') }}] Matomo admin login for {{ matomo_url }}"
            body: "{{ lookup('template', 'templates/notify_matomo_passwd.j2') }}"
            host: localhost
            port: 25
            secure: never
            tags:
              - matomo
              - users-update

      when: ( matomo_login_absent == True ) and ( matomo_login_email_absent == True )

  when: ( "no such user" not in matomo_user_check.stderr ) and ( matomo_config.stat.exists )
