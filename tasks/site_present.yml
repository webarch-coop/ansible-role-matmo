# Copyright 2018-2024 Chris Croome
#
# This file is part of the Webarchitects Matomo Ansible role.
#
# The Webarchitects Matomo Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects Matomo Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects Matomo Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: Ensure that a Matomo site is present
  block:

    - name: Check that required variables are defined
      ansible.builtin.assert:
        that:
          - ( matomo_url is defined ) and ( matomo_url | length > 0 )
          - ( matomo_token_auth is defined ) and ( matomo_token_auth | length > 0 )
          - ( matomo_site_name is defined ) and ( matomo_site_name | length > 0 )
          - ( matomo_site_main_url is defined ) and ( matomo_site_main_url is regex("^http:\/\/.*$") )
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

    - name: Set a fact for the site that should be present
      ansible.builtin.set_fact:
        matomo_site_required:
          name: "{{ matomo_site_name }}"
          url: "{{ matomo_site_main_url }}"
          urls: "{{ matomo_site_urls | join(',') }}"
          users: "{{ matomo_login }}"

    - name: Debug matomo_site_required
      ansible.builtin.debug:
        var: matomo_site_required

    - name: Include Matomo sites tasks
      ansible.builtin.include_tasks: sites.yml

    - name: Matomo site present check
      ansible.builtin.debug:
        msg: "The required site, {{ matomo_site_name }}, is present."
      when:
        - matomo_site_required.name == matomo_site_item.name
        - matomo_site_required.url == matomo_site_item.url
        - matomo_site_required.urls == matomo_site_item.urls
        - matomo_site_required.users == matomo_site_item.users
      loop: "{{ matomo_mariadb_sites_query.query_result[0] }}"
      loop_control:
        loop_var: matomo_site_item
        label: "{{ matomo_site_item.name }}"

    # - fail:

    - name: Include Matomo getAllSites API tasks
      ansible.builtin.include_tasks: get_all_sites.yml

    - name: Set matomo_site_ids to an empty array
      ansible.builtin.set_fact:
        matomo_existing_site_ids: []

    # TODO Add a quick check that if the matomo_site_name exists and the URLs match then skip slower checks

    - name: "Set a fact for the Matomo site ID for the main URL {{ matomo_site_main_url }}"
      ansible.builtin.set_fact:
        matomo_existing_site_ids: "{{ matomo_get_all_sites.json | community.general.json_query(matomo_jmespath_query_site_ids) }}"
      vars:
        matomo_jmespath_query_site_ids: "[?main_url=='{{ matomo_site_main_url }}'].idsite"

    # This is made redundant with the above JMESPath query
    # - name: "Check if there is a Matomo site ID for {{ matomo_site_main_url }}"
    #   ansible.builtin.include_tasks: get_sites_id_from_site_url.yml
    #   vars:
    #     matomo_proposed_url: "{{ matomo_site_main_url }}"

    - name: Print the matomo_existing_site_ids
      ansible.builtin.debug:
        var: matomo_existing_site_ids
        verbosity: 2
      when: matomo_existing_site_ids is defined

    - name: Print the matomo_site_urls
      ansible.builtin.debug:
        var: matomo_site_urls
        verbosity: 2
      when: matomo_site_urls is defined

    - name: "Add Matomo site IDs to the list of existing site IDs for the main URL {{ matomo_site_main_url }}"
      ansible.builtin.set_fact:
        matomo_existing_site_ids: "{{ ( matomo_existing_site_ids + [ ( matomo_get_all_sites.json | community.general.json_query(matomo_jmespath_query_site_ids) ) ] ) | unique }}"
      vars:
        matomo_jmespath_query_site_ids: >-
          [{{- matomo_site_urls |
          map("ansible.builtin.regex_replace", "^", "main_url=='") |
          map("ansible.builtin.regex_replace", "$", "'") | join('||') -}}].idsite
      when:
        - matomo_site_urls is defined
        - matomo_site_urls != []
        - matomo_site_urls != None
        - ( matomo_get_all_sites.json | community.general.json_query(matomo_jmespath_query_site_ids) ) != []
        - ( matomo_get_all_sites.json | community.general.json_query(matomo_jmespath_query_site_ids) ) != None

    - name: Print the matomo_existing_site_ids
      ansible.builtin.debug:
        var: matomo_existing_site_ids
        verbosity: 2
      when: matomo_existing_site_ids is defined

    # This is made redundant with the above set_fact
    # - name: "Check if there is a Matomo site ID for site URLs other than the main one"
    #   ansible.builtin.include_tasks: get_sites_id_from_site_url.yml
    #   loop: "{{ matomo_site_urls }}"
    #   loop_control:
    #     loop_var: matomo_proposed_url
    #   when: ( matomo_site_urls is defined ) and ( matomo_site_urls != [] )

    # - name: Print the matomo_existing_site_ids
    #   ansible.builtin.debug:
    #     var: matomo_existing_site_ids
    #     verbosity: 2
    #   when: matomo_existing_site_ids is defined

    - name: This Ansible role only supports having one Matomo site per URL
      ansible.builtin.fail:
        msg:
          - "There appears to be more than one Matomo site with the same URL"
          - "Please login and check these site IDs: {{ matomo_existing_site_ids }}"
          - "and this main URL {{ matomo_site_main_url }}"
          - "{% if matomo_site_urls is defined %}and these other URLs {{ matomo_site_urls | join(', ') }}{% endif %}"
      when:
        - matomo_existing_site_ids is defined
        - matomo_existing_site_ids[1] is defined

    - name: Check and update URLs
      block:

        - name: Set a matomo_site_id variable and add the matomo_site_main_url to a matomo_proposed_site_urls array
          ansible.builtin.set_fact:
            matomo_site_id: "{{ matomo_existing_site_ids[0] }}"
            matomo_proposed_site_urls:
              - "{{ matomo_site_main_url }}"

        # NOTE The main_url shouldn't be multiple URLs seperated by commas but
        #      due to earlier bugs this was the case with the Matomo site used
        #      for development of this role, so this could probably be changed
        #      in the future.
        - name: Set a matomo_existing_site_urls array
          ansible.builtin.set_fact:
            matomo_existing_site_urls: "{{ site.main_url.split(', ') | list }}"
          when: matomo_site_id == site.idsite
          loop: "{{ matomo_get_all_sites.json }}"
          loop_control:
            loop_var: site

        - name: Add matomo_site_urls URLs to Matomo site proposed URLs
          ansible.builtin.set_fact:
            matomo_proposed_site_urls: "{{ matomo_proposed_site_urls | default([]) + [ url ] }}"
          loop: "{{ matomo_site_urls }}"
          loop_control:
            loop_var: url
          when:
            - ( ansible_version.full is version('2.13.0', '>=') )
            - ( matomo_site_urls is defined ) and ( matomo_site_urls != [] )

        - name: Set variable for the sorted and unique existing URLs
          ansible.builtin.set_fact:
            matomo_existing_site_urls_sorted: "{{ matomo_existing_site_urls | sort | unique }}"
          when:
            - matomo_existing_site_urls is defined
            - matomo_existing_site_urls | type_debug == "list"

        - name: Set variable for the sorted and unique proposed URLs
          ansible.builtin.set_fact:
            matomo_proposed_site_urls_sorted: "{{ matomo_proposed_site_urls | sort | unique }}"
          when:
            - matomo_proposed_site_urls is defined
            - matomo_proposed_site_urls | type_debug == "list"

        - name: Debug existing URLs
          ansible.builtin.debug:
            var: matomo_existing_site_urls_sorted
            verbosity: 2
          when: matomo_existing_site_urls_sorted is defined

        - name: Debug matomo_proposed_site_urls_sorted
          ansible.builtin.debug:
            var: matomo_proposed_site_urls_sorted
            verbosity: 2
          when: matomo_proposed_site_urls_sorted is defined

        - name: Debug
          ansible.builtin.fail:

        - name: Include update Matomo site tasks when existing URLs don't match the proposed ones
          ansible.builtin.include_tasks: update_site.yml
          when:
            - ( matomo_existing_site_urls_sorted is defined ) and ( matomo_proposed_site_urls_sorted is defined )
            - ( matomo_existing_site_urls_sorted | difference(matomo_proposed_site_urls_sorted) | length > 0 ) or ( matomo_proposed_site_urls_sorted | difference(matomo_existing_site_urls_sorted) | length > 0 )

      when: ( matomo_existing_site_ids is defined ) and ( matomo_existing_site_ids[0] is defined )

    - name: Add new site to Matomo server
      ansible.builtin.include_tasks: add_site.yml
      when: ( matomo_existing_site_ids is not defined ) or ( matomo_existing_site_ids[0] is not defined )

    - name: Grant site access to Matomo accout
      block:

        # TODO Use the UsersManager.getUsers API call with userLogins set to matomo_login to check that the matomo_login_email
        # matches the result, if it does than the get Matomo user login from email address tasks can be skipped

        - name: "Check if a Matomo login with the email address {{ matomo_login_email }} exists using the API"
          ansible.builtin.uri:
            url: "{{ matomo_url }}"
            method: POST
            body_format: form-urlencoded
            body:
              module: API
              format: JSON
              token_auth: "{{ matomo_token_auth }}"
              method: UsersManager.getUserLoginFromUserEmail
              userEmail: "{{ matomo_login_email }}"
            status_code: 200
            return_content: true
            use_netrc: false
          become: true
          become_user: "{{ matomo_user }}"
          check_mode: false
          delegate_to: "{{ inventory_hostname }}"
          changed_when: false
          register: matomo_api_get_user_login_from_user_email

        - name: Debug matomo_api_get_user_login_from_user_email
          ansible.builtin.debug:
            var: matomo_api_get_user_login_from_user_email
            verbosity: 2

        - name: "Set the matomo_login_existing variable to {{ matomo_api_get_user_login_from_user_email.json.value }} as a Matomo account with a matching email address exists"
          ansible.builtin.set_fact:
            matomo_login_existing: "{{ matomo_api_get_user_login_from_user_email.json.value }}"
          when: ( matomo_api_get_user_login_from_user_email.json.value is defined )

        - name: When the existing Matomo login is defined
          block:

            - name: Debug matomo_login_existing
              ansible.builtin.debug:
                var: matomo_login_existing
                verbosity: 2

            - name: "Get users and their roles for Matomo site with ID {{ matomo_site_id }}"
              ansible.builtin.uri:
                url: "{{ matomo_url }}"
                method: POST
                body_format: form-urlencoded
                body:
                  module: API
                  format: JSON
                  token_auth: "{{ matomo_token_auth }}"
                  method: UsersManager.getUsersPlusRole
                  idSite: "{{ matomo_site_id }}"
                status_code: 200
              become: true
              become_user: "{{ matomo_user }}"
              check_mode: false
              delegate_to: "{{ inventory_hostname }}"
              changed_when: false
              register: matomo_api_get_users_plus_role

            - name: Debug matomo_api_get_users_plus_role
              ansible.builtin.debug:
                var: matomo_api_get_users_plus_role
                verbosity: 2

            - name: "Set a variable for the role for Matomo login {{ matomo_login }}"
              ansible.builtin.set_fact:
                matomo_existing_role: "{{ login_and_role.role  }}"
              when: login_and_role.login == matomo_login_existing
              loop: "{{ matomo_api_get_users_plus_role.json }}"
              loop_control:
                loop_var: login_and_role

            - name: "Set the role to view for {{ matomo_login_existing }} on site ID {{ matomo_site_id }}"
              ansible.builtin.uri:
                url: "{{ matomo_url }}"
                method: POST
                body_format: form-urlencoded
                body:
                  module: API
                  format: JSON
                  token_auth: "{{ matomo_token_auth }}"
                  method: UsersManager.setUserAccess
                  userLogin: "{{ matomo_login_existing }}"
                  access: "view"
                  idSites: "{{ matomo_site_id }}"
                  status_code: 200
              become: true
              become_user: "{{ matomo_user }}"
              delegate_to: "{{ inventory_hostname }}"
              register: matomo_api_set_user_access
              failed_when: ( matomo_api_set_user_access.json is not defined ) or ( matomo_api_set_user_access.json is defined and matomo_api_set_user_access.json.result != "success" )

            - name: Debug matomo_api_set_user_access
              ansible.builtin.debug:
                var: matomo_api_set_user_access
                verbosity: 2

            #  when: matomo_existing_role != "admin"

          when: ( matomo_login_existing is defined ) and ( matomo_login_existing | length > 0 )

      when: ( matomo_login_email is defined ) and ( matomo_login_email | length > 0 )

  tags:
    - matomo
...
