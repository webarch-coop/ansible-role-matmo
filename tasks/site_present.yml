---
- name: Ensure that a Matomo site is present
  block:

    - name: Check that required variables are defined
      assert:
        that:
          - ( matomo_url is defined ) and ( matomo_url | length > 0 )
          - ( matomo_token_auth is defined ) and ( matomo_token_auth | length > 0 )
          - ( matomo_site_name is defined ) and ( matomo_site_name | length > 0 )
          - ( matomo_site_main_url is defined ) and ( matomo_site_main_url is regex("^http:\/\/.*$") )

    - name: Include Matomo getAllSites API tasks
      include_tasks: get_all_sites.yml

    - name: Set matomo_site_ids to an empty array
      set_fact:
        matomo_existing_site_ids: []

    # TODO Add a quick check that if the matomo_site_name exists and the URLs match then skip slower checks

    - name: "Check if there is a Matomo site ID for {{ matomo_site_main_url }}"
      include_tasks: get_sites_id_from_site_url.yml
      vars:
        matomo_proposed_url: "{{ matomo_site_main_url }}"

    - name: Print the matomo_existing_site_ids
      debug:
        var: matomo_existing_site_ids
        verbosity: 2
      when: matomo_existing_site_ids is defined

    - name: "Check if there is a Matomo site ID for site URLs other than the main one"
      include_tasks: get_sites_id_from_site_url.yml
      loop: "{{ matomo_site_urls }}"
      loop_control:
        loop_var: matomo_proposed_url
      when: ( matomo_site_urls is defined ) and ( matomo_site_urls != [] )

    - name: Print the matomo_existing_site_ids
      debug:
        var: matomo_existing_site_ids
        verbosity: 2
      when: matomo_existing_site_ids is defined

    - name: This Ansible role only supports having one Matomo site per URL
      fail:
        msg:
          - "There appears to be more than one Matomo site with the same URL"
          - "Please login and check these site IDs: {{ matomo_existing_site_ids }}"
          - "and this main URL {{ matomo_site_main_url }}"
          - "{% if matomo_site_urls is defined %}and these other URLs {{ matomo_site_urls }}{% endif %}"
      when: ( matomo_existing_site_ids is defined ) and ( matomo_existing_site_ids[1] is defined )

    - name: Check and update URLs
      block:

        - name: Set a matomo_site_id variable and add the matomo_site_main_url to a matomo_proposed_site_urls array
          set_fact:
            matomo_site_id: "{{ matomo_existing_site_ids[0] }}"
            matomo_proposed_site_urls:
              - "{{ matomo_site_main_url }}"

        - name: Set a matomo_existing_site_urls array
          set_fact:
            matomo_existing_site_urls: "{{ site.main_url.split(', ') | list }}"
          when: matomo_site_id == site.idsite
          loop: "{{ matomo_get_all_sites.json }}"
          loop_control:
            loop_var: site

        - name: Add matomo_site_urls URLs to Matomo site proposed URLs
          set_fact:
            matomo_proposed_site_urls: "{{ matomo_proposed_site_urls }} + [ '{{ url }}' ]"
          loop: "{{ matomo_site_urls }}"
          loop_control:
            loop_var: url
          when: ( matomo_site_urls is defined ) and ( matomo_site_urls != [] )

        - name: Set variables for the sorted and unique existing and proposed URL
          set_fact:
            matomo_existing_site_urls_sorted: "{{ matomo_existing_site_urls | sort | unique }}"
            matomo_proposed_site_urls_sorted: "{{ matomo_proposed_site_urls | sort | unique }}"

        - name: Debug existing URLs
          debug:
            var: matomo_existing_site_urls_sorted
            verbosity: 2

        - name: Debug matomo_proposed_site_urls_sorted
          debug:
            var: matomo_proposed_site_urls_sorted
            verbosity: 2

        - name: Include update Matomo site tasks when existing URLs don't match the proposed ones
          include_tasks: update_site.yml
          when: ( matomo_existing_site_urls_sorted | difference(matomo_proposed_site_urls_sorted) | length > 0 ) or ( matomo_proposed_site_urls_sorted | difference(matomo_existing_site_urls_sorted) | length > 0 )

      when: ( matomo_existing_site_ids is defined ) and ( matomo_existing_site_ids[0] is defined )

    - name: Add new site to Matomo server
      include_tasks: add_site.yml
      when: ( matomo_existing_site_ids is not defined ) or ( matomo_existing_site_ids[0] is not defined )

    - name: Grant site access to Matomo accout
      block:

        # TODO Use the UsersManager.getUsers API call with userLogins set to matomo_login to check that the matomo_login_email
        # matches the result, if it does than the get Matomo user login from email address tasks can be skipped

        - name: "Check if a Matomo login with the email address {{ matomo_login_email }} exists using the API"
          uri:
            url: "{{ matomo_url }}"
            method: POST
            body_format: form-urlencoded
            body:
              module: API
              format: JSON
              token_auth: "{{ matomo_token_auth }}"
              method: UsersManager.getUserLoginFromUserEmail
              userEmail: "{{ matomo_login_email }}"
            status_code: 200
            return_content: true
          register: matomo_api_get_user_login_from_user_email
          changed_when: false
          failed_when: ( matomo_api_get_user_login_from_user_email.json.value is not defined )

        - name: Debug matomo_api_get_user_login_from_user_email
          debug:
            var: matomo_api_get_user_login_from_user_email
            verbosity: 2

        - name: "Set the matomo_login_existing variable to {{ matomo_api_get_user_login_from_user_email.json.value }} as a Matomo account with a matching email address exists"
          set_fact:
            matomo_login_existing: "{{ matomo_api_get_user_login_from_user_email.json.value }}"
          when: ( matomo_api_get_user_login_from_user_email.json.value is defined )

        - name: When the existing Matomo login is defined
          block:

            - name: Debug matomo_login_existing
              debug:
                var: matomo_login_existing
                verbosity: 2

            - name: "Get users and their roles for Matomo site with ID {{ matomo_site_id }}"
              uri:
                url: "{{ matomo_url }}"
                method: POST
                body_format: form-urlencoded
                body:
                  module: API
                  format: JSON
                  token_auth: "{{ matomo_token_auth }}"
                  method: UsersManager.getUsersPlusRole
                  idSite: "{{ matomo_site_id }}"
                status_code: 200
              register: matomo_api_get_users_plus_role

            - name: Debug matomo_api_get_users_plus_role
              debug:
                var: matomo_api_get_users_plus_role
                verbosity: 2

            - name: "Set a variable for the role for Matomo login {{ matomo_login }}"
              set_fact:
                matomo_existing_role: "{{ login_and_role.role  }}"
              when: login_and_role.login == matomo_login_existing
              loop: "{{ matomo_api_get_users_plus_role.json }}"
              loop_control:
                loop_var: login_and_role

            - name: "Set the role to view for {{ matomo_login_existing }} on site ID {{ matomo_site_id }}"
              uri:
                url: "{{ matomo_url }}"
                method: POST
                body_format: form-urlencoded
                body:
                  module: API
                  format: JSON
                  token_auth: "{{ matomo_token_auth }}"
                  method: UsersManager.setUserAccess
                  userLogin: "{{ matomo_login_existing }}"
                  access: "view"
                  idSites: "{{ matomo_site_id }}"
                  status_code: 200
              register: matomo_api_set_user_access
              failed_when: ( matomo_api_set_user_access.json is not defined ) or ( matomo_api_set_user_access.json is defined and matomo_api_set_user_access.json.result != "success" )

            - name: Debug matomo_api_set_user_access
              debug:
                var: matomo_api_set_user_access
                verbosity: 2

            #  when: matomo_existing_role != "admin"

          when: ( matomo_login_existing is defined ) and ( matomo_login_existing | length > 0 )

      when: ( matomo_login_email is defined ) and ( matomo_login_email | length > 0 )

  tags:
    - matomo
...
