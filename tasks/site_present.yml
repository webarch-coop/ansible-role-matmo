# Copyright 2018-2024 Chris Croome
#
# This file is part of the Webarchitects Matomo Ansible role.
#
# The Webarchitects Matomo Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects Matomo Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects Matomo Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: Ensure that a Matomo site is present
  block:

    - name: Check that required variables are defined
      ansible.builtin.assert:
        that:
          - ( matomo_url is defined ) and ( matomo_url | length > 0 )
          - ( matomo_token_auth is defined ) and ( matomo_token_auth | length > 0 )
          - ( matomo_site_name is defined ) and ( matomo_site_name | length > 0 )
          - ( matomo_site_main_url is defined ) and ( matomo_site_main_url is regex("^http:\/\/.*$") )
        quiet: "{% if ansible_check_mode or ansible_verbosity >= 1 %}false{% else %}true{% endif %}"

    - name: Set a fact for the site that should be present and set site status to None
      ansible.builtin.set_fact:
        matomo_site_required:
          name: "{{ matomo_site_name }}"
          url: "{{ matomo_site_main_url }}"
          urls: "{{ matomo_site_urls | join(',') }}"
          users: "{{ matomo_login }}"
        matomo_site_status: None

    - name: Debug matomo_site_required
      ansible.builtin.debug:
        var: matomo_site_required
        verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}1{% else %}2{% endif %}"

    - name: Include Matomo sites tasks
      ansible.builtin.include_tasks: sites.yml

    - name: Debug matomo_site_item
      ansible.builtin.debug:
        var: matomo_site_item
        verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}1{% else %}2{% endif %}"
      when: matomo_site_item is defined

    - name: Debug the Matomo site name
      ansible.builtin.debug:
        msg: "{{ matomo_site_item.name }} is type {{ matomo_site_item.name | ansible.builtin.type_debug }}"
        verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}1{% else %}2{% endif %}"
      loop: "{{ matomo_mariadb_sites_query.query_result[0] }}"
      loop_control:
        loop_var: matomo_site_item
        label: "{{ matomo_site_item.name }}"

    - name: Debug the Matomo site url
      ansible.builtin.debug:
        msg: "{{ matomo_site_item.url }} is type {{ matomo_site_item.url | ansible.builtin.type_debug }}"
        verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}1{% else %}2{% endif %}"
      loop: "{{ matomo_mariadb_sites_query.query_result[0] }}"
      loop_control:
        loop_var: matomo_site_item
        label: "{{ matomo_site_item.name }}"

    - name: Debug the Matomo site urls
      ansible.builtin.debug:
        msg: "{{ matomo_site_item.urls }} is type {{ matomo_site_item.urls | ansible.builtin.type_debug }}"
        verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}1{% else %}2{% endif %}"
      loop: "{{ matomo_mariadb_sites_query.query_result[0] }}"
      loop_control:
        loop_var: matomo_site_item
        label: "{{ matomo_site_item.name }}"

    - name: Debug the Matomo site variable users
      ansible.builtin.debug:
        msg: "{{ matomo_site_item.users }} is type {{ matomo_site_item.users | ansible.builtin.type_debug }}"
        verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}1{% else %}2{% endif %}"
      loop: "{{ matomo_mariadb_sites_query.query_result[0] }}"
      loop_control:
        loop_var: matomo_site_item
        label: "{{ matomo_site_item.name }}"

    - name: The site name should be a string
      ansible.builtin.assert:
        that:
          - ( matomo_site_item.name | ansible.builtin.type_debug ) == "AnsibleUnsafeText"
        quiet: "{% if ansible_check_mode or ansible_verbosity >= 1 %}false{% else %}true{% endif %}"
      loop: "{{ matomo_mariadb_sites_query.query_result[0] }}"
      loop_control:
        loop_var: matomo_site_item
        label: "{{ matomo_site_item.name }}"

    - name: The site url should be a string
      ansible.builtin.assert:
        that:
          - ( matomo_site_item.url | ansible.builtin.type_debug ) == "AnsibleUnsafeText"
        quiet: "{% if ansible_check_mode or ansible_verbosity >= 1 %}false{% else %}true{% endif %}"
      loop: "{{ matomo_mariadb_sites_query.query_result[0] }}"
      loop_control:
        loop_var: matomo_site_item
        label: "{{ matomo_site_item.name }}"

    - name: The site urls should be a string or none and not a list
      ansible.builtin.assert:
        that:
          - >-
            ( ( matomo_site_item.urls | ansible.builtin.type_debug ) == "AnsibleUnsafeText" ) or
            ( ( matomo_site_item.urls | ansible.builtin.type_debug ) == "NoneType" )
          - ( matomo_site_item.urls | ansible.builtin.type_debug ) != "list"
        quiet: "{% if ansible_check_mode or ansible_verbosity >= 1 %}false{% else %}true{% endif %}"
      loop: "{{ matomo_mariadb_sites_query.query_result[0] }}"
      loop_control:
        loop_var: matomo_site_item
        label: "{{ matomo_site_item.name }}"

    - name: The site user should be a string or none
      ansible.builtin.assert:
        that:
          - >-
            ( ( matomo_site_item.users | ansible.builtin.type_debug ) == "AnsibleUnsafeText" ) or
            ( ( matomo_site_item.users | ansible.builtin.type_debug ) == "NoneType" )
        quiet: "{% if ansible_check_mode or ansible_verbosity >= 1 %}false{% else %}true{% endif %}"
      loop: "{{ matomo_mariadb_sites_query.query_result[0] }}"
      loop_control:
        loop_var: matomo_site_item
        label: "{{ matomo_site_item.name }}"

    - name: Debug url and urls types
      ansible.builtin.debug:
        msg:
          - "The value of matomo_site_item.urls is {{ matomo_site_item.urls }} and the type for matomo_site_item.urls: {{ matomo_site_item.urls | ansible.builtin.type_debug }}"
          - "The value of  matomo_site_item.url is and the type for matomo_site_item.url: {{ matomo_site_item.url | ansible.builtin.type_debug }}"
        verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}1{% else %}2{% endif %}"
      loop: "{{ matomo_mariadb_sites_query.query_result[0] }}"
      loop_control:
        loop_var: matomo_site_item
        label: "{{ matomo_site_item.name }}"

    - name: Debug the Matomo site status
      ansible.builtin.debug:
        msg: >-
          The required name is {{ matomo_site_required.name }},
          required url is {{ matomo_site_required.url }},
          required urls is {% if matomo_site_required.urls | ansible.builtin.type_debug != "NoneType" %}{{ matomo_site_required.urls | string | ansible.builtin.split(',') | join(', ') }}{% else %}{{ matomo_site_required.urls }}{% endif %} and
          required users is {{ matomo_site_required.users }}.
          The existing name is {{ matomo_site_item.name }},
          existing url is {{ matomo_site_item.url }},
          existing urls is {% if matomo_site_item.urls | ansible.builtin.type_debug != "NoneType" %}{{ matomo_site_item.urls | string | ansible.builtin.split(',') | join(', ') }}{% else %}{{ matomo_site_item.urls }}{% endif %} and
          existing users is {{ matomo_site_item.users }}.
          The determined site status is
          {% if
          ( matomo_site_required.name == matomo_site_item.name ) and
          ( matomo_site_required.url == matomo_site_item.url ) and
          ( matomo_site_required.urls == matomo_site_item.urls ) and
          ( matomo_site_required.users == matomo_site_item.users )
          %}correct{% elif
          ( matomo_site_required.name != matomo_site_item.name ) and
          ( matomo_site_required.url == matomo_site_item.url ) and
          ( matomo_site_required.urls == matomo_site_item.urls ) and
          ( matomo_site_required.users == matomo_site_item.users )
          %}name-incorrect{% elif
          ( matomo_site_required.name == matomo_site_item.name ) and
          ( matomo_site_required.url != matomo_site_item.url ) and
          ( matomo_site_required.urls == matomo_site_item.urls ) and
          ( matomo_site_required.users == matomo_site_item.users )
          %}url-incorrect{% elif
          ( matomo_site_required.name == matomo_site_item.name ) and
          ( matomo_site_required.url == matomo_site_item.url ) and
          ( matomo_site_required.urls != matomo_site_item.urls ) and
          ( matomo_site_required.users == matomo_site_item.users )
          %}urls-incorrect{% elif
          ( matomo_site_required.name == matomo_site_item.name ) and
          ( matomo_site_required.users == matomo_site_item.users ) and
          ( matomo_site_urls | ansible.builtin.type_debug != "NoneType" ) and
          ( matomo_site_item.urls | ansible.builtin.type_debug != "NoneType" ) and
          ( matomo_site_urls | ansible.builtin.type_debug != "list" ) and
          ( matomo_site_item.urls | ansible.builtin.type_debug != "list" ) and
          ( matomo_site_urls | string | ansible.builtin.split(',') + [matomo_site_main_url | string] | intersect(matomo_site_item.urls + [matomo_site_item.url | string]) | length > 0 )
          %}url-and-urls-incorrect{% elif
          ( matomo_site_required.name != matomo_site_item.name ) and
          ( matomo_site_required.users == matomo_site_item.users ) and
          ( matomo_site_urls | ansible.builtin.type_debug != "NoneType" ) and
          ( matomo_site_item.urls | ansible.builtin.type_debug != "NoneType" ) and
          ( matomo_site_urls | ansible.builtin.type_debug != "list" ) and
          ( matomo_site_item.urls | ansible.builtin.type_debug != "list" ) and
          ( matomo_site_urls | string | ansible.builtin.split(',') + [matomo_site_main_url | string] | intersect(matomo_site_item.urls + [matomo_site_item.url | string]) | length > 0 )
          %}name-and-url-and-urls-incorrect{%
          else %}nomatch{% endif -%}
        verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}1{% else %}2{% endif %}"
      loop: "{{ matomo_mariadb_sites_query.query_result[0] }}"
      loop_control:
        loop_var: matomo_site_item
        label: "{{ matomo_site_item.name }}"

    - name: Test the Matomo site status
      ansible.builtin.set_fact:
        matomo_site_status_test: >-
          {%- if
          ( matomo_site_required.name == matomo_site_item.name ) and
          ( matomo_site_required.url == matomo_site_item.url ) and
          ( matomo_site_required.urls == matomo_site_item.urls ) and
          ( matomo_site_required.users == matomo_site_item.users )
          -%}{{ matomo_site_item.id }} correct{%- elif
          ( matomo_site_required.name != matomo_site_item.name ) and
          ( matomo_site_required.url == matomo_site_item.url ) and
          ( matomo_site_required.urls == matomo_site_item.urls ) and
          ( matomo_site_required.users == matomo_site_item.users )
          -%}{{ matomo_site_item.id }} name-incorrect{%- elif
          ( matomo_site_required.name == matomo_site_item.name ) and
          ( matomo_site_required.url != matomo_site_item.url ) and
          ( matomo_site_required.urls == matomo_site_item.urls ) and
          ( matomo_site_required.users == matomo_site_item.users )
          -%}{{ matomo_site_item.id }} url-incorrect{%- elif
          ( matomo_site_required.name == matomo_site_item.name ) and
          ( matomo_site_required.url == matomo_site_item.url ) and
          ( matomo_site_required.urls != matomo_site_item.urls ) and
          ( matomo_site_required.users == matomo_site_item.users )
          -%}{{ matomo_site_item.id }} urls-incorrect{%- elif
          ( matomo_site_required.name == matomo_site_item.name ) and
          ( matomo_site_required.users == matomo_site_item.users ) and
          ( matomo_site_urls | ansible.builtin.type_debug != "NoneType" ) and
          ( matomo_site_item.urls | ansible.builtin.type_debug != "NoneType" ) and
          ( matomo_site_urls | ansible.builtin.type_debug != "list" ) and
          ( matomo_site_item.urls | ansible.builtin.type_debug != "list" ) and
          ( matomo_site_urls | string | ansible.builtin.split(',') + [matomo_site_main_url | string] | intersect(matomo_site_item.urls | string | ansible.builtin.split(',') + [matomo_site_item.url | string]) | length > 0 )
          -%}{{ matomo_site_item.id }} url-and-urls-incorrect{%- elif
          ( matomo_site_required.name != matomo_site_item.name ) and
          ( matomo_site_required.users == matomo_site_item.users ) and
          ( matomo_site_urls | ansible.builtin.type_debug != "NoneType" ) and
          ( matomo_site_item.urls | ansible.builtin.type_debug != "NoneType" ) and
          ( matomo_site_urls | ansible.builtin.type_debug != "list" ) and
          ( matomo_site_item.urls | ansible.builtin.type_debug != "list" ) and
          ( matomo_site_urls | string | ansible.builtin.split(',') + [matomo_site_main_url | string] | intersect(matomo_site_item.urls | string | ansible.builtin.split(',') + [matomo_site_item.url | string]) | length > 0 )
          -%}{{ matomo_site_item.id }} name-and-url-and-urls-incorrect{%-
          else -%}nomatch{%- endif -%}
      # register: matomo_site_status_test
      register: matomo_site_status_test_result
      loop: "{{ matomo_mariadb_sites_query.query_result[0] }}"
      loop_control:
        loop_var: matomo_site_item
        label: "{{ matomo_site_item.name }}"

    - name: Debug matomo_site_status_test
      ansible.builtin.debug:
        var: matomo_site_status_test
        verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}1{% else %}2{% endif %}"

    - name: Debug matomo_site_status_test_result
      ansible.builtin.debug:
        var: matomo_site_status_test_result
        verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}1{% else %}2{% endif %}"

    - name: Set a fact for all the Matomo site status test results omitting nomatch
      ansible.builtin.set_fact:
        matomo_site_status_all: "{{ matomo_site_status_test_result | community.general.json_query('results[].ansible_facts[].matomo_site_status_test') | reject('ansible.builtin.regex', 'nomatch') }}"

    - name: Debug matomo_site_status_all
      ansible.builtin.debug:
        var: matomo_site_status_all
        verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}1{% else %}2{% endif %}"

    - name: If more than one site matches then manual intervention is required to adjust the Matomo sites
      ansible.builtin.assert:
        that:
          - matomo_site_status_all | length <= 1
        quiet: "{% if ansible_check_mode or ansible_verbosity >= 1 %}false{% else %}true{% endif %}"
        fail_msg: Please login to Matomo as an admin and manually adjust the sites as the site to be added appears to have attributes that match more than one existing site."

    - name: Set a fact for all the Matomo site status when the status was determined
      ansible.builtin.set_fact:
        matomo_site_id: "{{ (matomo_site_status_all[0] | ansible.builtin.split)[0] }}"
        matomo_site_status: "{{ (matomo_site_status_all[0] | ansible.builtin.split)[1] }}"
      when: matomo_site_status_all != []

    - name: Set a fact for all the Matomo site status when the status was not determined
      ansible.builtin.set_fact:
        matomo_site_id: None
        matomo_site_status: nomatch
      when: matomo_site_status_all == []

    - name: Debug matomo_site_status
      ansible.builtin.debug:
        var: matomo_site_status
        verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}1{% else %}2{% endif %}"

    - name: Debug matomo_site_id
      ansible.builtin.debug:
        var: matomo_site_id
        verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}1{% else %}2{% endif %}"
      when: matomo_site_id is defined

    - name: Include update Matomo site tasks when existing URLs don't match the proposed ones
      ansible.builtin.include_tasks: update_site.yml
      when:
        - matomo_site_status != "correct"
        - matomo_site_id is defined
        - matomo_site_id is regex("^[0-9]{1,9}$")

    - name: Include add new site to Matomo server tasks when there is no match for the proposed site
      ansible.builtin.include_tasks: add_site.yml
      when:
        - matomo_site_status == "nomatch"
        - matomo_site_id is defined
        - matomo_site_id is not regex("^[0-9]{1,9}$")

    - name: Grant site access to Matomo accout
      block:

        # TODO Use the UsersManager.getUsers API call with userLogins set to matomo_login to check that the matomo_login_email
        # matches the result, if it does than the get Matomo user login from email address tasks can be skipped

        - name: "Check if a Matomo login with the email address {{ matomo_login_email }} exists using the API"
          ansible.builtin.uri:
            url: "{{ matomo_url }}"
            method: POST
            body_format: form-urlencoded
            body:
              module: API
              format: JSON
              token_auth: "{{ matomo_token_auth }}"
              method: UsersManager.getUserLoginFromUserEmail
              userEmail: "{{ matomo_login_email }}"
            status_code: 200
            return_content: true
            use_netrc: false
          become: true
          become_user: "{{ matomo_user }}"
          check_mode: false
          delegate_to: "{{ inventory_hostname }}"
          changed_when: false
          register: matomo_api_get_user_login_from_user_email

        - name: Debug matomo_api_get_user_login_from_user_email
          ansible.builtin.debug:
            var: matomo_api_get_user_login_from_user_email
            verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}1{% else %}2{% endif %}"

        - name: "Set the matomo_login_existing variable to {{ matomo_api_get_user_login_from_user_email.json.value }} as a Matomo account with a matching email address exists"
          ansible.builtin.set_fact:
            matomo_login_existing: "{{ matomo_api_get_user_login_from_user_email.json.value }}"
          when: ( matomo_api_get_user_login_from_user_email.json.value is defined )

        - name: When the existing Matomo login is defined
          block:

            - name: Debug matomo_login_existing
              ansible.builtin.debug:
                var: matomo_login_existing
                verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}1{% else %}2{% endif %}"

            - name: "Get users and their roles for Matomo site with ID {{ matomo_site_id }}"
              ansible.builtin.uri:
                url: "{{ matomo_url }}"
                method: POST
                body_format: form-urlencoded
                body:
                  module: API
                  format: JSON
                  token_auth: "{{ matomo_token_auth }}"
                  method: UsersManager.getUsersPlusRole
                  idSite: "{{ matomo_site_id }}"
                status_code: 200
              become: true
              become_user: "{{ matomo_user }}"
              check_mode: false
              delegate_to: "{{ inventory_hostname }}"
              changed_when: false
              register: matomo_api_get_users_plus_role

            - name: Debug matomo_api_get_users_plus_role
              ansible.builtin.debug:
                var: matomo_api_get_users_plus_role
                verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}1{% else %}2{% endif %}"

            - name: "Set a variable for the role for Matomo login {{ matomo_login }}"
              ansible.builtin.set_fact:
                matomo_existing_role: "{{ login_and_role.role  }}"
              when: login_and_role.login == matomo_login_existing
              loop: "{{ matomo_api_get_users_plus_role.json }}"
              loop_control:
                loop_var: login_and_role

            - name: "Set the role to view for {{ matomo_login_existing }} on site ID {{ matomo_site_id }}"
              ansible.builtin.uri:
                url: "{{ matomo_url }}"
                method: POST
                body_format: form-urlencoded
                body:
                  module: API
                  format: JSON
                  token_auth: "{{ matomo_token_auth }}"
                  method: UsersManager.setUserAccess
                  userLogin: "{{ matomo_login_existing }}"
                  access: "view"
                  idSites: "{{ matomo_site_id }}"
                  status_code: 200
              become: true
              become_user: "{{ matomo_user }}"
              delegate_to: "{{ inventory_hostname }}"
              register: matomo_api_set_user_access
              failed_when: >-
                ( matomo_api_set_user_access.json is not defined ) or
                ( matomo_api_set_user_access.json is defined and matomo_api_set_user_access.json.result != "success" )
              when:
                - matomo_site_id is defined
                - matomo_site_id is regex("^[0-9]{1,9}$")

            - name: Debug matomo_api_set_user_access
              ansible.builtin.debug:
                var: matomo_api_set_user_access
                verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}1{% else %}2{% endif %}"

            #  when: matomo_existing_role != "admin"

          when: ( matomo_login_existing is defined ) and ( matomo_login_existing | length > 0 )

      when: ( matomo_login_email is defined ) and ( matomo_login_email | length > 0 )

  tags:
    - matomo
...
